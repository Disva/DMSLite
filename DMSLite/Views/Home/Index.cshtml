@{
    ViewBag.Title = "Home Page";
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>

<script>

    function scrollToBottom() {
        // Scroll the output container to the bottom
        $("#outputOuter").animate({
            scrollTop: $("#outputOuter").prop("scrollHeight")
        }, 350);
    }
    // Remove loading styling
    function updateContainer() {

        scrollToBottom();

        // Remove the loading style and re-enable the inputs
        $("#mainInput").toggleClass("loading-background");
        $("#mainInput").prop("disabled", false);
        $("#submitBtn").prop("disabled", false);
        setFocusToTextBox();

        // Check if there any modals that need to be shown
        checkShowModal();

        // Check if any of those modals have select2 boxes
        checkFormatSelect2();
    }

    function checkModalWithSearch() {
        // Check if there any modals that need to be shown
        checkShowModal();
        scrollToBottom();
        // Check if any of those modals have select2 boxes
        checkFormatSelect2();
    }
    // pop the searchbar text up into the feed
    function addText() {
        var div = document.getElementById('outputContainer');
        var searchTerm = document.getElementById('mainInput').value;
        var htmlCode = '<div class="bubbleLine"><div class="bubble rightBubble">' + searchTerm + '</div></div>';
        div.innerHTML = div.innerHTML + htmlCode;
        scrollToBottom();
    }

    // Show loading styling (loading circle, disabled box)
    function startLoading() {
        // Remove error states
        $("#mainInputGroup").removeClass("has-error");
        $("#submitBtn").removeClass("btn-danger");

        // Disable the inputs
        $("#mainInput").prop("disabled", true);
        $("#submitBtn").prop("disabled", true);

        // Clear the textbox
        $("#mainInput").val("");

        // Format the textbox
        $("#mainInput").toggleClass("loading-background");
    }

    // Show style for an error state
    function ajaxFailure() {
        $("#mainInputGroup").addClass("has-error");
        $("#submitBtn").addClass("btn-danger");
    }

    function showLoadingButton(id) {
        var button = $(document.getElementById(id)).find(".loading-button");
        $(button).find(".loading-button-icon").css("display", "inline-block");
        $(button).prop("disabled", true);
    }

</script>
<div id="outputOuter" class="row content-box">
    <div class="col-md-12" id="outputContainer"><div class="bubbleLine"><div class="bubble leftBubble">What would you like to do?</div></div></div>
</div>

@using (Ajax.BeginForm("SendInput", new AjaxOptions()
{
    InsertionMode = InsertionMode.InsertAfter,
    UpdateTargetId = "outputContainer",
    OnSuccess = "updateContainer",
    OnBegin = "startLoading",
    OnFailure = "ajaxFailure"
}))
{
    <div class="sticky-footer">
        <div class="container">
            <div class="row">
                <div class="form-group">
                    <div id="mainInputGroup" class="input-group">

                        <div id="search-container">
                            <input type="text" disabled="disabled" id="suggestion" />
                            @Html.TextBox("mainInput", null, new { @class = "form-control", @autocomplete = "off", @placeholder = "Thinking..." })
                        </div>
                        <span class="input-group-btn">
                            <input id="submitBtn" class="btn btn-default" type="submit" value="Send" />
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@using (Ajax.BeginForm("ReceiptMenu", "Receipt", new AjaxOptions()
{
    InsertionMode = InsertionMode.InsertAfter,
    UpdateTargetId = "outputContainer",
    OnSuccess = "updateContainer",
    OnBegin = "startLoading",
    OnFailure = "ajaxFailure"
}))
{
    <span class="input-group-btn" style="position:fixed; top: 200px; left: 200px; z-index: 10;">
        <input id="submitBtn" class="btn btn-default" type="submit" value="Test Receipt Generation!" />
    </span>
}

<script>
    document.getElementById("submitBtn").addEventListener("click", function () {
        addText();
    });

    function setFocusToTextBox() {
        document.getElementById("mainInput").focus();
    }
    setFocusToTextBox();

    // Check if the webpage has any modals to display
    function checkShowModal() {
        var node = $("#outputContainer").find(".showModal");
        if (node.length > 0) {
            $(node).modal();
            $(node).removeClass("showModal");

            //focus the first input field
            $(node).on('shown.bs.modal', function () {
                $('.modal-body input:text[value=""]:first').focus();
            });

            //delete modals as soon as they are hidden
            $(node).on('hidden.bs.modal', function (e) {
                $(this).remove();
                setFocusToTextBox();
            });
        }
    }

    function checkFormatSelect2() {
        checkFormatSelect2Donor();
        checkFormatSelect2Batch();
    }

    function checkFormatSelect2Donor() {
        var node = $("#outputContainer").find(".format-donor-select2");
        if (node.length > 0) {

            $(node).select2({
                ajax: {
                    url: "/Donors/SearchDonors/",
                    dataType: 'json',
                    delay: 500,
                    data: function (params) {
                        return {
                            searchKey: params.term
                        };
                    },
                    cache: true
                },
                placeholder: { id: -1, text: "Select a donor" },
                templateResult: function (state) {
                    if (state.id === undefined) {
                        return 'Searching...';
                    }

                    return state.firstName + " " + state.lastName;
                },
                templateSelection: function (state) {
                    if (state.id === -1) {
                        return state.text;
                    }
                    return state.firstName || state.text;
                },
                minimumInputLength: 1,
                dropdownParent: $(node).parents(".modal")
            });

            $(node).removeClass("format-donor-select2");
        }
    }

    function checkFormatSelect2Batch() {
        var searchOpenBatches = true;
        var node = $("#outputContainer").find(".format-batch-select2");
        if (node.length == 0)
        {
            node = $("#outputContainer").find(".format-closed-batch-select2");
            searchOpenBatches = false;
        }
        if (node.length > 0) {

            $(node).select2({
                ajax: {
                    url: searchOpenBatches ? "/Batch/SearchBatches/" : "/Batch/SearchClosedBatches/",
                    dataType: 'json',
                    delay: 500,
                    data: function (params) {
                        return {
                            searchKey: params.term
                        };
                    },
                    cache: true
                },
                placeholder: { id: -1, text: "Select a batch" },
                templateResult: function (state) {
                    if (state.id === undefined) {
                        return 'Searching...';
                    }

                    return state.title;
                },
                templateSelection: function (state) {
                    if (state.id === -1) {
                        return state.text;
                    }
                    return state.title || state.text;
                },
                minimumInputLength: 1,
                dropdownParent: $(node).parents(".modal")
            });

            $(node).removeClass( searchOpenBatches ? "format-batch-select2" : "format-closed-batch-select2");
        }
    }

    function closeModal(id) {
        $('#' + id).modal('hide');
        scrollToBottom();
    }

    var clickedButtonMap = {};
    function bounceInput(id) {
        if (clickedButtonMap[id] === true) {
            return false;
        }

        clickedButtonMap[id] = true;
    }

    function enableButtonAndCheckShowModal(id) {
        clickedButtonMap[id] = false;
        checkShowModal();
    }

    function enableButtonAndCheckSearch(id) {
        clickedButtonMap[id] = false;
        checkModalWithSearch();
    }

    function enableButtonAndScroll(id) {
        clickedButtonMap[id] = false;
        scrollToBottom();
    }

    /*$(function () {
        $.fn.modal.Constructor.prototype.enforceFocus = function () { };
    })*/
</script>

<script>
    //inspired by http://stackoverflow.com/questions/4663710/how-do-i-implement-autocomplete-without-using-a-dropdownlist
    $(function () {

        var allData = [
     [
         'show',
         'show me',
         'view',
         'display',
         [
             'donor',
             [
                 '[name or email or phoneNumber]'
             ]
         ]
     ],
     [
         'show',
         'show me',
         'view',
         'display',
         [
             'all',
             '*',
             [
                 'donors',
                 'batches'
             ]
         ]
     ],
     [
         'edit',
         'modify',
         [
             '[donor name or search]'
         ]
     ],
     [
         'add',
         'add new',
         'create',
         'create new',
         'new',
         [
             '[donor name, email or phoneNumber]',
             'donor',
             'donation',
             'batch'
         ]
     ],
     [
         'close',
         [
             'batch',
             [
                 '[batch name]'
             ]
         ]
     ],
     [
         'print',
         'make',
         [
             'receipts'
         ]
     ]
        ];
        var haystack = [];
        for (outer = 0; outer < allData.length; outer++) {
            input = allData[outer];
            var tempArray = [];
            var tempArray2 = [];
            do {
                //for every element in the input
                for (i = 0; i < input.length; i++) {
                    if (Array.isArray(input[i])) {
                        break;
                    }
                    if (tempArray2.length == 0 && !Array.isArray(input[i])) {
                        if (input[i] != "*") {
                            tempArray.push(input[i]);
                        } else {
                            tempArray.push("");
                        }

                    } else {
                        //append
                        for (j = 0; j < tempArray2.length; j++) {
                            if (!Array.isArray(input[i])) {
                                if (input[i] != "*") {
                                    if (tempArray2[j].length == 0) {
                                        tempArray.push(input[i]);
                                    } else {
                                        tempArray.push(tempArray2[j] + " " + input[i]);
                                    }

                                } else {
                                    tempArray.push(tempArray2[j]);
                                }
                            }
                        }
                    }
                }
                //if the last one is not an array, break out
                if (!Array.isArray(input[input.length - 1])) {
                    break;
                }
                input = input[input.length - 1];
                tempArray2 = tempArray;
                tempArray = [];
            }
            while (true);
            $.merge(haystack, tempArray);
        }
        console.log(haystack);

        //use the KEYDOWN to cancel out the tab key in the #search interface
        $('#mainInput').keydown(function (e) {
            var code = (e.keyCode ? e.keyCode : e.which);
            if (code == 9) {
                return false;
            }
        });

        //act on the keyup
        $('#mainInput').keyup(function (e) {
            var $suggest = $('#suggestion');
            var code = (e.keyCode ? e.keyCode : e.which);

            // 'tab' key was pressed
            if (code == 9) {
                s = $suggest.val();

                //if there is a [] somewhere in the suggestion, jump to it, otherwise fill the box
                if (s.indexOf('[') > -1) {
                    s = s.substring(0, s.indexOf('['));
                }

                //if there is no suggestion, break
                if (s == "") {
                    return false;
                }
                $(this).val(s);

                return false;
            }

            // if some other key was pressed
            var needle = $(this).val();
            // is the field is empty, make the suggestion ""
            if (!$.trim(needle).length) {
                $suggest.val("");
                return false;
            }

            // compare input with haystack to get a suggestion
            $.each(haystack, function (i, term) {
                var regex = new RegExp('^' + needle, 'i');
                if (regex.test(term)) {
                    $suggest.val(needle + term.slice(needle.length));
                    // use first result
                    return false;
                }
                $suggest.val("");
            });
        });

    });

    function downloadZipFile(form) {
        var formData = $(form).serialize();
        window.location.assign("/Receipt/ZipReceipts?"+formData);
    }

    function checkReceiptButton() {
        var receiptButton = $("#submitReceiptForm");
        var donorSelect = $("#receiptDonors").next();
        var batchSelect = $("#receiptBatches").next();
        if (donorSelect.find(".select2-selection__choice").length == 0 || batchSelect.find(".select2-selection__choice").length == 0)
            receiptButton.attr("disabled", true);
        else
            receiptButton.attr("disabled", false);
    }
</script>