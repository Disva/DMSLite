@{
    ViewBag.Title = "Home Page";
}

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.unobtrusive-ajax.min.js"></script>
<script>

    function scrollToBottom(){
        // Scroll the output container to the bottom
        $("#outputOuter").animate({
            scrollTop: $("#outputOuter").prop("scrollHeight")
        }, 350);   
    }
    // Remove loading styling
    function updateContainer() {     

        scrollToBottom();

        // Remove the loading style and re-enable the inputs
        $("#mainInput").toggleClass("loading-background");
        $("#mainInput").prop("disabled", false);
        $("#submitBtn").prop("disabled", false);
        setFocusToTextBox();
    }
    // pop the searchbar text up into the feed
function addText() {
        var div = document.getElementById('outputContainer');
        var searchTerm = document.getElementById('mainInput').value;
        var htmlCode = '<div class="bubbleLine"><div class="bubble rightBubble">'+searchTerm+'</div></div>';
        div.innerHTML = div.innerHTML + htmlCode;
        scrollToBottom();
    }

// Show loading styling (loading circle, disabled box)
    function startLoading() {
        // Remove error states
        $("#mainInputGroup").removeClass("has-error");
        $("#submitBtn").removeClass("btn-danger");

        // Disable the inputs
        $("#mainInput").prop("disabled", true);
        $("#submitBtn").prop("disabled", true);

        // Clear the textbox
        $("#mainInput").val("");

        // Format the textbox
        $("#mainInput").toggleClass("loading-background");
    }

    // Show style for an error state
    function ajaxFailure() {
        $("#mainInputGroup").addClass("has-error");
        $("#submitBtn").addClass("btn-danger");
    }
</script>
<div id="outputOuter" class="row content-box">
    <div class="col-md-12" id="outputContainer"><div class="bubbleLine"><div class="bubble leftBubble">What would you like to do?</div></div></div>
</div>

@using (Ajax.BeginForm("SendInput", new AjaxOptions()
{
    InsertionMode = InsertionMode.InsertAfter,
    UpdateTargetId = "outputContainer",
    OnSuccess = "updateContainer",
    OnBegin = "startLoading",
    OnFailure = "ajaxFailure"
}))
{
    <div class="sticky-footer">
        <div class="container">
            <div class="row">
                <div class="form-group">
                    <div id="mainInputGroup" class="input-group">
                        @Html.TextBox("mainInput", null, new { @class = "form-control", @autocomplete = "off", @placeholder = "Thinking..." })
                        <span class="input-group-btn">
                            <input id="submitBtn" class="btn btn-default" type="submit" value="Send" />
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<script>
    document.getElementById("submitBtn").addEventListener("click", function () {
        addText();
    });

    function setFocusToTextBox() {
        document.getElementById("mainInput").focus();
    }
    setFocusToTextBox();

    $(function () {
        // select the target node
        var target = document.getElementById('outputContainer');

        // create an observer instance
        var observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                mutation.addedNodes.forEach(function (node) {

                    // If a new modal has been added, add the object and an event
                    if ($(node).hasClass("showModal"))
                    {
                        var theModal = $(node).find(".modal");

                        // Show the modal
                        theModal.modal();

                        // If the modal has been closed add it has a success view, modify the bubble text
                        $(theModal).on('hide.bs.modal', function (e) {
                            if ($(node).find(".addSuccess").length > 0)
                            {
                                $(node).find(".bubble").html("Donor added");
                            }
                        })

                        // Remove the auto-show class
                        $(node).removeClass("showModal");
                    }
                });
            });
        });

        // configuration of the observer:
        var config = { attributes: false, childList: true, characterData: false };

        // pass in the target node, as well as the observer options
        observer.observe(target, config);
    })

    function showAddModal(button)
    {
        $(button).parents(".modalSibling").next().modal('show');
    }
</script>
